/*
 *Original Author:	shko
 */

#ifndef DESCRIPTOR_TEST_H
#define DESCRIPTOR_TEST_H

#include <descriptor.h>

#include <subtitlingdescriptor.h>
#include <networknamedescriptor.h>
#include <servicelistdescriptor.h>
#include <servicedescriptor.h>
#include <shorteventdescriptor.h>
#include <extendedeventdescriptor.h>
#include <parentalratingdescriptor.h>
#include <localtimeoffsetdescriptor.h>
#include <satellitedeliverysystemdescriptor.h>
#include <cabledeliverysystemdescriptor.h>
#include <terrestrialdeliverysystemdescriptor.h>
#include <bouquetnamedescriptor.h>
#include <countryavailabilitydescriptor.h>
#include <linkagedescriptor.h>
#include <componentdescriptor.h>
#include <timeshiftedservicedescriptor.h>
#include <timeshiftedeventdescriptor.h>
#include <streamIdentifierdescriptor.h>
#include <caidentifierdescriptor.h>
#include <contentdescriptor.h>
#include <privatedataspecifierdescriptor.h>
#include <servicemovedescriptor.h>
#include <frequencylistdescriptor.h>
#include <partialtransportstreamdescriptor.h>
#include <nvodreferencedescriptor.h>
#include <teletextdescriptor.h>
#include <multilingualnetworknamedescriptor.h>
#include <multilingualbouquetnamedescriptor.h>
#include <multilingualservicenamedescriptor.h>
#include <mosaicdescriptor.h>
#include <telephonedescriptor.h>
#include <multilingualcomponentdescriptor.h>
#include <pdcdescriptor.h>
#include <ancillarydatadescriptor.h>
#include <shortsmoothingbufferdescriptor.h>
#include <databroadcastdescriptor.h>
#include <databroadcastiddescriptor.h>
#include <ac3descriptor.h>
#include <enhancedac3descriptor.h>
#include <aacdescriptor.h>
#include <celllistdescriptor.h>
#include <s2satellitedeliverysystemdescriptor.h>
#include <ftacontentmanagementdescriptor.h>
#include <extensiondescriptor.h>

//ts 102 323
#include <defaultauthoritydescriptor.h>
#include <contentidentifierdescriptor.h>
#include <relatedcontentdescriptor.h>

//13818-1
#include <videostreamdescriptor.h>
#include <audiostreamdescriptor.h>
#include <hierarchydescriptor.h>
#include <registrationdescriptor.h>
#include <datastreamalignmentdescriptor.h>
#include <targetbackgroundgriddescriptor.h>
#include <videowindowdescriptor.h>
#include <conditionalaccessdescriptor.h>
#include <iso639languagedescriptor.h>
#include <systemclockdescriptor.h>
#include <multiplexbufferutilizationdescriptor.h>
#include <copyrightdescriptor.h>
#include <maximumbitratedescriptor.h>
#include <privatedataindicatordescriptor.h>
#include <smoothingbufferdescriptor.h>
#include <stddescriptor.h>
#include <avcvideodescriptor.h>

//13818-6, tr 101202
#include <carouselidentifierdescriptor.h>
#include <associationtagdescriptor.h>
#include <deferredassociationtagdescriptor.h>

// ts 102 809
#include <applicationsignallingdescriptor.h>



/* Constant */

const char bytes[] = { 0x5A, 0xA5, 0x55, 0xAA };
const std::string stringTest = "STRING_TEST";
const std::string eng = "eng";
const std::string fra = "fra";
const std::string deu = "deu";
const std::string stringTestEng = "STRING_TEST_ENG";
const std::string stringTestFra = "STRING_TEST_FRA";
const std::string stringTestDeu = "STRING_TEST_DEU";


/* General purpose descriptor */

char nullDescriptor[] =
{
    0xFF, // Dummy tag
    0x00  // Length
};

char oneByteDescriptor[] =
{
    0xFF, // Dummy tag
    0x01, // Length
    0x5A  // Byte
};

char twoBytesDescriptor[] =
{
    0xFF, // Dummy tag
    0x01, // Length
    0x5A, // Byte
    0xA5  // Byte
};

char threeBytesDescriptor[] =
{
    0xFF, // Dummy tag
    0x01, // Length
    0x5A, // Byte
    0xA5, // Byte
    0x55  // Byte
};

char fourBytesDescriptor[] =
{
    0xFF, // Dummy tag
    0x01, // Length
    0x5A, // Byte
    0xA5, // Byte
    0x55, // Byte
    0xAA  // Byte
};

char eightBytesDescriptor[] =
{
    0xFF, // Dummy tag
    0x01, // Length
    0x5A, // Byte
    0xA5, // Byte
    0x55, // Byte
    0xAA, // Byte
    0x5A, // Byte
    0xA5, // Byte
    0x55, // Byte
    0xAA  // Byte

};

char stringDescriptor[] =
{
    0xFF, // Dummy tag
    0x0B, // Length
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54 // String = STRING_TEST
};


char multilingualStringDescriptor[] =
{
    0xFF, // Dummy tag
    0x39, // Length
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x0F, // StringLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x45, 0x4E, 0x47, // String = STRING_TEST_ENG
    0x66, 0x72, 0x61, // Iso639LangageCode = fra
    0x0F, // StringLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x46, 0x52, 0x41, // String = STRING_TEST_FRA
    0x64, 0x65, 0x75, // Iso639LangageCode = deu
    0x0F, // StringLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x44, 0x45, 0x55  // String = STRING_TEST_DEU
};


/* SI descriptors */
/* 300 468 */


/* subtitlingDescriptor */
char subtitlingDescriptor1[] =
{
    0x59, // Tag
    0x18, // Length
    0x65, 0x6E, 0x67, // Iso639LanggeCode = eng
    0x12, // SubtitlingType
    0x34, 0x56, // CompositionPageId
    0x78, 0x9A, // AncillaryPageId

    0x66, 0x72, 0x61, // Iso639LangageCode = fra
    0xBC, // SubtitlingType
    0xDE, 0xF0, // CompositionPageId
    0x12, 0x34, // AncillaryPageId

    0x64, 0x65, 0x75, // Iso639LangageCode = deu
    0x56, // SubtitlingType
    0x78, 0x9A, // CompositionPageId
    0xBC, 0xDE, // AncillaryPageId
};


/* networkNameDescriptor */
char *networkNameDescriptor1 = stringDescriptor;
char *networkNameDescriptor2 = nullDescriptor;

/* serviceListDescriptor */
char serviceListDescriptor1[] =
{
    0x41, // Tag
    0x09, // Length
    0x12, 0x34, // ServiceId
    0x56, // ServiceType
    0x78, 0x9A, // ServiceId
    0xBC, // ServiceType
    0xDE, 0xF0, // ServiceId
    0x12, // ServiceType
};
char *serviceListDescriptor2 = nullDescriptor;


/* serviceDescriptor */
char serviceDescriptor1[] =
{
    0x48, // Tag
    0x19, // Length
    0x01, // ServiceType
    0x0B, // ServiceProviderNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceProviderName = STRING_TEST
    0x0B, // ServiceNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceName = STRING_TEST
};
char serviceDescriptor2[] =
{
    0x48, // Tag
    0x0E, // Length
    0x02, // ServiceType
    0x00, // ServiceProviderNameLength
    0x0B, // ServiceNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceName = STRING_TEST
};
char serviceDescriptor3[] =
{
    0x48, // Tag
    0x0E, // Length
    0x03, // ServiceType
    0x0B, // ServiceProviderNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceProviderName = STRING_TEST
    0x00, // ServiceNameLength
};
char serviceDescriptor4[] =
{
    0x48, // Tag
    0x03, // Length
    0x04, // ServiceType
    0x00, // ServiceProviderNameLength
    0x00, // ServiceNameLength
};


/* shortEventDescriptor */
char shortEventDescriptor1[] =
{
    0x4D, // Tag
    0x1B, // Length
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x0B, // EventNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // EventName = STRING_TEST
    0x0B, // TextLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Text = STRING_TEST
};
char shortEventDescriptor2[] =
{
    0x4D, // Tag
    0x10, // Length
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x00, // EventNameLength
    0x0B, // TextLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // EventName = STRING_TEST
};
char shortEventDescriptor3[] =
{
    0x4D, // Tag
    0x10, // Length
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x0B, // EventNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Text = STRING_TEST
    0x00, // TextLength
};
char shortEventDescriptor4[] =
{
    0x4D, // Tag
    0x05, // Length
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x00, // EventNameLength
    0x00, // TextLength
};


/* extendedEventDescriptor */
char extendedEventDescriptor1[] =
{
    0x4E, // Tag
    0x59, // Length
    0x01, // DescriptorNumber, LastDescriptorNumber
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x48, // LengthOfItems
    0x0B, // ItemDescriptionLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ItemDescription = STRING_TEST
    0x0B, // ItemLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Item = STRING_TEST
    0x0B, // ItemDescriptionLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ItemDescription = STRING_TEST
    0x0B, // ItemLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Item = STRING_TEST
    0x0B, // ItemDescriptionLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ItemDescription = STRING_TEST
    0x0B, // ItemLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Item = STRING_TEST
    0x0B, // TextLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Text = STRING_TEST
};
char extendedEventDescriptor2[] =
{
    0x4E, // Tag
    0x4E, // Length
    0x01, // DescriptorNumber, LastDescriptorNumber
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x48, // LengthOfItems
    0x0B, // ItemDescriptionLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ItemDescription = STRING_TEST
    0x0B, // ItemLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Item = STRING_TEST
    0x0B, // ItemDescriptionLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ItemDescription = STRING_TEST
    0x0B, // ItemLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Item = STRING_TEST
    0x0B, // ItemDescriptionLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ItemDescription = STRING_TEST
    0x0B, // ItemLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Item = STRING_TEST
    0x00, // TextLength
};
char extendedEventDescriptor3[] =
{
    0x4E, // Tag
    0x11, // Length
    0x01, // DescriptorNumber, LastDescriptorNumber
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x00, // LengthOfItems
    0x0B, // TextLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Text = STRING_TEST
};
char extendedEventDescriptor4[] =
{
    0x4E, // Tag
    0x06, // Length
    0x01, // DescriptorNumber, LastDescriptorNumber
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x00, // LengthOfItems
    0x00, // TextLength
};

/* parentalRatingDescriptor */
char parentalRatingDescriptor1[] =
{
    0x55, // Tag
    0x0C, // Length
    0x65, 0x6E, 0x67, // CountryCode = eng
    0x12, // Rating
    0x66, 0x72, 0x61, // CountryCode = fra
    0x34, // Rating
    0x64, 0x65, 0x75, // CountryCode = deu
    0x56, // Rating
};
char *parentalRatingDescriptor2 = nullDescriptor;

/* localTimeOffsetDescriptor */
char localTimeOffsetDescriptor1[] =
{
    0x58, // Tag
    0x27, // Length
    0x65, 0x6E, 0x67, // CountryCode = eng
    0x12, // CountryRegionId, LocalTimeOffsetPolarity
    0x34, 0x56, // LocalTimeOffset
    0x78, 0x9A, 0x12, 0x34, 0x56, // TimeOfChange
    0x78, 0x90, // NextTimeOffset

    0x66, 0x72, 0x61, // CountryCode = fra
    0x12, // CountryRegionId, LocalTimeOffsetPolarity
    0x34, 0x56, // LocalTimeOffset
    0x78, 0x9A, 0x12, 0x34, 0x56, // TimeOfChange
    0x78, 0x90, // NextTimeOffset

    0x64, 0x65, 0x75, // CountryCode = deu
    0x12, // CountryRegionId, LocalTimeOffsetPolarity
    0x34, 0x56, // LocalTimeOffset
    0x78, 0x9A, 0x12, 0x34, 0x56, // TimeOfChange
    0x78, 0x90, // NextTimeOffset
};


/* satelliteDeliverySystemDescriptor */
char satelliteDeliverySystemDescriptor1[] =
{
    0x43, // Tag
    0x0B, // Length
    0x12, 0x34, 0x56, 0x78, // Frequency
    0x9A, 0xBC, // Orbital
    0xDE, // WEFlag, Polarisation, Modulation
    0x10, 0x12, 0x34, 0x56, // SymbolRate, FecInner
};

/* cableDeliverySystemDescriptor */
char cableDeliverySystemDescriptor1[] =
{
    0x44, // Tag
    0x0B, // Length
    0x12, 0x34, 0x56, 0x78, // Frequency
    0x9A, 0xBC, // Reserved, FecOuter
    0xDE, // Modulation
    0x10, 0x12, 0x34, 0x56, // SymbolRate, FecInner
};

/* terrestrialDeliverySystemDescriptor */
char terrestrialDeliverySystemDescriptor1[] =
{
    0x5A, // Tag
    0x0B, // Length
    0x12, 0x34, 0x56, 0x78, // CentreFrequency
    0x9A, // Bandwidth
    0xBC, // Constellation, HierarchyInformation, CodeRateHPStream
    0xDE, // CodeRateLPStream, GuardInterval, TransmissionMode, OtherFrequencyFlag
    0xF0, 0x12, 0x34, 0x56, // Reserved
};

/* bouquetNameDescriptor = stringDescriptor */
char *bouquetNameDescriptor1 = stringDescriptor;
char *bouquetNameDescriptor2 = nullDescriptor;

/* countryAvailabilityDescriptor */
char countryAvailabilityDescriptor1[] =
{
    0x49, // Tag
    0x0A, // Length
    0x80, // CountryAvailabilityFlag
    0x65, 0x6E, 0x67, // countryCode = eng
    0x66, 0x72, 0x61, // countryCode = fra
    0x64, 0x65, 0x75, // countryCode = deu
};
char countryAvailabilityDescriptor2[] =
{
    0x49, // Tag
    0x01, // Length
    0x00, // CountryAvailabilityFlag
};

/* linkageDescriptor */
char linkageDescriptor1[] =
{
    0x00, //stuff
    0x4A, // Tag
    0x0C, // Length
    0x12, 0x34, // TransportStreamId
    0x56, 0x78, // OriginalNetworkId
    0x9A, 0xBC, // ServiceId
    0x08, // LinkageType
    0x10, // HandOverType, OriginType
    0x12, 0x34, // NetworkId
    0x56, 0x78, // InitialServiceId
};
char linkageDescriptor2[] =
{
    0x00, 0x00, //stuff
    0x4A, // Tag
    0x0A, // Length
    0x12, 0x34, // TransportStreamId
    0x56, 0x78, // OriginalNetworkId
    0x9A, 0xBC, // ServiceId
    0x08, // LinkageType
    0xF0, // HandOverType, OriginType
    0x56, 0x78, // InitialServiceId
};
char linkageDescriptor3[] =
{
    0x00, 0x00, 0x00, //stuff
    0x4A, // Tag
    0x0A, // Length
    0x12, 0x34, // TransportStreamId
    0x56, 0x78, // OriginalNetworkId
    0x9A, 0xBC, // ServiceId
    0x08, // LinkageType
    0x11, // HandOverType, OriginType
    0x12, 0x34, // NetworkId
};
char linkageDescriptor4[] =
{
    0x00, 0x00, 0x00, 0x00,//stuff
    0x4A, // Tag
    0x08, // Length
    0x12, 0x34, // TransportStreamId
    0x56, 0x78, // OriginalNetworkId
    0x9A, 0xBC, // ServiceId
    0x08, // LinkageType
    0xF1, // HandOverType, OriginType
};

/* componentDescriptor */
char componentDescriptor1[] =
{
    0x50, // Tag
    0x11, // Length
    0xF1, // StreamContent
    0x12, // ComponentType
    0x23, // ComponentTag
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // Text = STRING_TEST
};
char componentDescriptor2[] =
{
    0x50, // Tag
    0x06, // Length
    0xF1, // StreamContent
    0x12, // ComponentType
    0x23, // ComponentTag
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
};

/* timeShiftedServiceDescriptor = twoBytesDescriptor */
char *timeShiftedServiceDescriptor1 = twoBytesDescriptor;

/* timeShiftedEventDescriptor */
char *timeShiftedEventDescriptor1 = fourBytesDescriptor;

/* streamIdentifierDescriptor */
char *streamIdentifierDescriptor1 = oneByteDescriptor;

/* caIdentifierDescriptor */
char caIdentifierDescriptor1[] =
{
    0x53, // Tag
    0x06, // Length
    0x12, 0x34, // CaIdentifier
    0x56, 0x78, // CaIdentifier
    0x9A, 0xBC, // CaIdentifier
};
char *caIdentifierDescriptor2 = nullDescriptor;

/* contentDescriptor */
char contentDescriptor1[] =
{
    0x54, // Tag
    0x06, // Length
    0x12, 0x34, // Nibble
    0x56, 0x78, // Nibble
    0x9A, 0xBC, // Nibble
};
char *contentDescriptor2 = nullDescriptor;

/* privateDataSpecifierDescriptor */
char *privateDataSpecifierDescriptor1 = fourBytesDescriptor;


/* serviceMoveDescriptor */
char serviceMoveDescriptor1[] =
{
    0x60, // Tag
    0x06, // Length
    0x12, 0x34, // NewOriginalNetworkId
    0x56, 0x78, // NewTransportStreamId
    0x9A, 0xBC, // NewServiceId
};

/* frequencyListDescriptor */
char frequencyListDescriptor1[] =
{
    0x62, // Tag
    0x0D, // Length
    0x12, // CodingType
    0x34, 0x56, 0x78, 0x9A, // CentreFrequency
    0xBC, 0xDE, 0xF0, 0x12, // CentreFrequency
    0x34, 0x56, 0x78, 0x9A, // CentreFrequency
};

char frequencyListDescriptor2[] =
{
    0x62, // Tag
    0x01, // Length
    0x12, // CodingType
};

/* partialTransportStreamDescriptor */
char *partialTransportStreamDescriptor1 = eightBytesDescriptor;


/* nvodReferenceDescriptor */
char nvodReferenceDescriptor1[] =
{
    0x4B, // Tag
    0x12, // Length
    0x12, 0x34, // TransportStreamId
    0x56, 0x78, // OriginalNetworkId
    0x9A, 0xBC, // ServiceId
    0xDE, 0xF0, // TransportStreamId
    0x12, 0x34, // OriginalNetworkId
    0x56, 0x78, // ServiceId
    0x9A, 0xBC, // TransportStreamId
    0xDE, 0xF0, // OriginalNetworkId
    0x12, 0x34, // ServiceId
};
char nvodReferenceDescriptor2[] =
{
    0x4B, // Tag
    0x00, // Length
};

/* teletextDescriptor */
char teletextDescriptor1[] =
{
    0x56, // Tag
    0x0F, // Length

    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x12, // TeletextType, TeletextMagazineNumber
    0x34, // TeletextMagazineNumber

    0x66, 0x72, 0x61, // Iso639LangageCode = fra
    0x56, // TeletextType, TeletextMagazineNumber
    0x78, // TeletextMagazineNumber

    0x64, 0x65, 0x75, // Iso639LangageCode = deu
    0x9A, // TeletextType, TeletextMagazineNumber
    0xBC, // TeletextMagazineNumber
};
char *teletextDescriptor2 = nullDescriptor;


/* multilingualNetworkNameDescriptor */
char *multilingualNetworkNameDescriptor1 = multilingualStringDescriptor;
char *multilingualNetworkNameDescriptor2 = nullDescriptor;

/* multilingualBouquetNameDescriptor */
char *multilingualBouquetNameDescriptor1 = multilingualStringDescriptor;
char *multilingualBouquetNameDescriptor2 = nullDescriptor;



/* multilingualServiceNameDescriptor */
char multilingualServiceNameDescriptor1[] =
{
    0x5D, // Tag
    0x5D, // Length

    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x0B, // ServiceProvideNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceProvider = STRING_TEST
    0x0F, // ServiceNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x45, 0x4E, 0x47, // ServiceName = STRING_TEST_ENG

    0x66, 0x72, 0x61, // Iso639LangageCode = fra
    0x0B, // ServiceProvideNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceProvider = STRING_TEST
    0x0F, // ServiceNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x46, 0x52, 0x41, // ServiceName = STRING_TEST_FRA

    0x64, 0x65, 0x75, // Iso639LangageCode = deu
    0x0B, // ServiceProvideNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, // ServiceProvider = STRING_TEST
    0x0F, // ServiceNameLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x44, 0x45, 0x55  // ServiceName = STRING_TEST_DEU
};
char *multilingualServiceNameDescriptor2 = nullDescriptor;

/* mosaicDescriptor */
char mosaicDescriptor1[] = {
    0x51, // Tag
    0x2A, // Length
    0x12, // MosaicEntryPoint, NumberOfHorizontalElementaryCells, NumberOfVerticalElementaryCells

    0x34, 0x56, // LogicalCellId, LogicalCellPresentationInfo
    0x03, // ElementaryCellFieldLength
    0x78, // ElementaryCellId
    0x9A, // ElementaryCellId
    0xBC, // ElementaryCellId
    0x01, // CellLinkageInfo
    0xF0, 0x12, // BouquetId

    0x34, 0x56, // LogicalCellId, LogicalCellPresentationInfo
    0x00, // ElementaryCellFieldLength
    0x02, // CellLinkageInfo
    0x78, 0x9A, // OriginalNetworkId
    0xBC, 0xDE, // TransportStreamId
    0xF0, 0x12, // ServiceId

    0x34, 0x56, // LogicalCellId, LogicalCellPresentationInfo
    0x00, // ElementaryCellFieldLength
    0x03, // CellLinkageInfo
    0x78, 0x9A, // OriginalNetworkId
    0xBC, 0xDE, // TransportStreamId
    0xF0, 0x12, // ServiceId

    0x34, 0x56, // LogicalCellId, LogicalCellPresentationInfo
    0x00, // ElementaryCellFieldLength
    0x04, // CellLinkageInfo
    0x78, 0x9A, // OriginalNetworkId
    0xBC, 0xDE, // TransportStreamId
    0xF0, 0x12, // ServiceId
    0x34, 0x56, // EventId
};

/* telephoneDescriptor */
char telephoneDescriptor1[] =
{
    0x57, // Tag
    0x0F, // Length
    0x12, // ForeignAvailability, ConnectionType
    0x46, // CountryPrefixLength, InternationalAreaCodeLength, OperatorCodeLength
    0x16, // NationalAreaCode, CoreNumberLength
    0x33, 0x34, // CountryPrefix
    0x35, // InternationalAreaCode
    0x36, 0x37, // OperatorCode
    0x38, // NationalAreaCode
    0x31, 0x32, 0x33, 0x34, 0x35, 0x36, // CoreNumber
};


/* multilingualComponentDescriptor */
char multilingualComponentDescriptor1[] =
{
    0x5E, // Tag
    0x3A, // Length
    0x12, // ComponentTag
    0x65, 0x6E, 0x67, // Iso639LangageCode = eng
    0x0F, // StringLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x45, 0x4E, 0x47, // String = STRING_TEST_ENG
    0x66, 0x72, 0x61, // Iso639LangageCode = fra
    0x0F, // StringLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x46, 0x52, 0x41, // String = STRING_TEST_FRA
    0x64, 0x65, 0x75, // Iso639LangageCode = deu
    0x0F, // StringLength
    0x53, 0x54, 0x52, 0x49, 0x4E, 0x47, 0x5F, 0x54, 0x45, 0x53, 0x54, 0x5F, 0x44, 0x45, 0x55  // String = STRING_TEST_DEU
};
char multilingualComponentDescriptor2[] =
{
    0x5E, // Tag
    0x01, // Length
    0x12, // ComponentTag
};

/* pdcDescriptor */
char *pdcDescriptor1 = threeBytesDescriptor;

/* ancillaryDataDescriptor */
char *ancillaryDataDescriptor1 = oneByteDescriptor;

/* shortSmoothingBufferDescriptor */
//sb_size=1 sb_leak_rate=10
char shortSmoothingBufferDescriptor[] =
{
        0x61,
        0x01, 0x4A,
};

/* dataBroadcastDescriptor */
    // broadcast_id=0x1122
    // component_tag=78
    // selector_byte="4259225445"
    // selector_byte_txt="BY.TE"
    // lang=eng
    // text="Some text"
char dataBroadcastDescriptor[] =
{
    0x00, 0x00, //stuff
        0x64,
        0x16,
        0x11, 0x22,
        0x4E,
        0x05,
        0x42, 0x59, 0x22, 0x54, 0x45,
        0x65, 0x6E, 0x67,
        0x09,
        0x53, 0x6F, 0x6D, 0x65, 0x20, 0x74, 0x65, 0x78, 0x74,
};

/* dataBroadcastIdDescriptor */
// broadcast_id=0x1122
// selector_byte="554e4958"
// selector_byte_txt="UNIX"
char dataBroadcastIdDescriptor[] =
{
        0x66,
        0x06,
        0x11, 0x22,
        0x55, 0x4E, 0x49, 0x58,
};

char dataBroadcastIdDescriptorStuff[] =
{
    0x00, //stuff
        0x66,
        0x06,
        0x11, 0x22,
        0x55, 0x4E, 0x49, 0x58,
};
/* ac3Descriptor */
// component_type_flag=1
// component_type=10
// bsid_flag=1
// bsid=20
// mainid_flag=1
// mainid=30
// asvc_flag=1
// asvc=40
// additional_info = "UNIX"
char ac3Descriptor[] =
{
        0x6A,
        0x09,
        0xFF,
        0x0A, 0x14, 0x1E, 0x28,
        0x55, 0x4E, 0x49, 0x58,
};

/* enhancedAc3Descriptor */
// component_type_flag=1 component_type=10
// bsid_flag=1 bsid=20
// mainid_flag=1 mainid=30
// asvc_flag=1 asvc=40
// mixinfoexists=1
// substream1_flag=1 substream1=50
// substream2_flag=1 substream1=60
// substream3_flag=1 substream1=70
// additional_info = "UNIX"
char enhancedAc3Descriptor[] =
{
        0x7A,
        0x0C,
        0xFF,
        0x0A, 0x14, 0x1E, 0x28,
        0x32, 0x3C, 0x46,
        0x55, 0x4E, 0x49, 0x58,
};


/* aacDescriptor */
// profile_and_level="0x14"
// aac_type_flag="1" aac_type="0x1f"
// additional_info = "UNIX"
char aacDescriptor[] =
{
        0x7C,
        0x07,
        0x14,
        0x80,
        0x1F,
        0x55, 0x4E, 0x49, 0x58,

};

char aacDescriptor2[] =
{
        0x00, 0x00, // stuff.
        0x7C,
        0x04,
        0x14,
        0x80,
        0x1F,
        0x55, //0x4E, 0x49, 0x58,

};

/* cellListDescriptor */
//cell_id=1234
//cell_latitude=4567
//cell_longtitude=5678
//cell_extent_of_latitude=123
//cell_extent_of_longtitude=345

//cell_id=4456
//cell_latitude=5567
//cell_longtitude=6678
//cell_extend_of_latitude=1234
//cell_extend_of_longtitude=1234
//    - cell_id_extension=0
//      subcell_latitude=4386
//      subcell_longtitude=13124
//      subcell_extend_of_latitude=1383
//      subcell_extend_of_longtitude=2202
//    - cell_id_extension=1
//      subcell_latitude=8755
//      subcell_longtitude=17493
//      subcell_extend_of_latitude=1656
//      subcell_extend_of_longtitude=2475
//    - cell_id_extension=2
//      subcell_latitude=8755
//      subcell_longtitude=17493
//      subcell_extend_of_latitude=1656
//      subcell_extend_of_longtitude=2475

//- cell_id=65535
//cell_latitude=61166
//cell_longtitude=56797
//cell_extend_of_latitude=1929
//cell_extend_of_longtitude=2748
//    - cell_id_extension=0
//      subcell_latitude=4386
//      subcell_longtitude=13124
//      subcell_extend_of_latitude=1383
//      subcell_extend_of_longtitude=2202
char cellListDescriptor[] =
{
        0x6C,
        0x3E, 0x04, 0xD2, 0x11,
        0xD7, 0x16, 0x2E, 0x07,
        0xB1, 0x59, 0x00, 0x11,
        0x68, 0x15, 0xBF, 0x1A,
        0x16, 0x4D, 0x24, 0xD2,
        0x18, 0x00, 0x11, 0x22,
        0x33, 0x44, 0x56, 0x78,
        0x9A, 0x01, 0x22, 0x33,
        0x44, 0x55, 0x67, 0x89,
        0xAB, 0x02, 0x22, 0x33,
        0x44, 0x55, 0x67, 0x89,
        0xAB, 0xFF, 0xFF, 0xEE,
        0xEE, 0xDD, 0xDD, 0x78,
        0x9A, 0xBC, 0x08, 0x00,
        0x11, 0x22, 0x33, 0x44,
        0x56, 0x78, 0x9A,
};

/* s2SatelliteDeliverySystemDescriptor */
// scramblingSequenceSelector = 1
// multipleInputStreamFlag = 1
// backwardsCompatibilityIndicator = 1
// reserved
// reserved
// scramblingSequenceIndex = 76770
// inputStreamidentifier = 12

char s2SatelliteDeliverySystemDescriptor[] =
{
    0x79,
    0x05,
    0xFF,
    0xFD, 0x2B, 0xE2,
    0x0C,
};

/* ftaContentManagementDescriptor */
// reserved
// doNotScramble = 0
// controlRemoteAccessOverInternet = 1
// doNotApplyRevocation = 1
char ftaContentManagementDescriptor[] =
{
    0x7E, // Tag
    0x01, // Length
    0xF3,
};

// TODO: deep parse
/* extensionDescriptor */
char extensionDescriptor[] =
{
    0x7F,
    0x05,
    0x06,
    0x11, 0x22, 0x33, 0x44,
};

char extensionDescriptorStuff[] =
{
    0x00, 0x00, // stuff
    0x7F,
    0x05,
    0x06,
    0x11, 0x22, 0x33, 0x44,
};
// ts 102 323

/* defaultAuthorityDescriptor */
char defaultAuthorityDescriptor[] =
{
    0x73, // Tag
    0x04, // Length
    0xF1, 0x12, 0x23, 0x65,
};

char defaultAuthorityDescriptorStuff[] =
{
    0x00, 0x01, // stuff
    0x73, // Tag
    0x04, // Length
    0xF1, 0x12, 0x23, 0x65,
};


/* contentIdentifierDescriptor */
// cridType = 0x01;
// cridLocation = 00;
// cridByte = 0xF1, 0x12, 0x23, 0x65,

// cridType = 0x02;
// cridLocation = 1;
// cridRef = 0xABCD
char contentIdentifierDescriptor[] =
{
    0x76,
    0x09,
    0x04,
    0x04,
    0xF1, 0x12, 0x23, 0x65,
    0x09,
    0xAB, 0xCD,

};


/* relatedContentDescriptor */
char relatedContentDescriptor[] =
{
    0x74, // Tag
    0x03, // Length
    0xF1, 0x12, 0x23,
};

















/* 13818 - 1 */


/* videoStreamDescriptor1 */
// multiple_frame_rate=1
// frame_rate_code=3
    // frame_rate_txt="25.00"
// mpeg1_only=1
// constraint_parameter=1
// still_picture=1
char videoStreamDescriptor1[] =
{
        0x02,
        0x01,
        0x9F,
};

/* videoStreamDescriptor2 */
// multiple_frame_rate=1
// frame_rate_code=4
    // frame_rate_txt="29.97"
// mpeg1_only=0
// constraint_parameter=1
// still_picture=1
// profile=72
    // profile_txt="Main"
// chroma_format=2
// frame_rate_extension_flag=0

char videoStreamDescriptor2[] =
{
        0x02,
        0x03,
        0xA3,
        0x48,
        0x9F,

};

/* audioStreamDescriptor */
// free_format_flag=1
//ID=1
    //ID_txt="MPEG Audio"
//layer=2
    //layer_txt="Layer II"
//variable_rate_audio_indicator=1
char audioStreamDescriptor[] =
{
        0x03,
        0x01,
        0xEF,
};

/* hierarchyDescriptor */
// hierarchy type=1
    // type_txt="Spatial Scalability"
// hierarchy layer_index=6
// hierarchy embedded_layer_index=7
// hierarchy channel=8
char hierarchyDescriptor[] =
{
        0x04,
        0x04,
        0xF1,
        0xC6,
        0xC7,
        0xC8,
};

/* registrationDescriptor */
// identifier=TEST
// additional_identification_info = UNIX
char registrationDescriptor[] =
{
    0x00, //stuff
        0x05,
        0x08,
        0x54, 0x45, 0x53, 0x54,
        0x55, 0x4E, 0x49, 0x58,
};

/* dataStreamAlignmentDescriptor */
//alignment type=2
    //alignment_type txt="Video access unit"
char dataStreamAlignmentDescriptor[] =
{
        0x06,
        0x01,
        0x02,
};

/* targetBackgroundGridDescriptor */
// horizontal_size=720
// vertical_size=576
// aspect_ratio_info=7
char targetBackgroundGridDescriptor[] =
{
        0x07,
        0x04,
        0x0B, 0x40, 0x24, 0x07,
};

/* videoWindowDescriptor */
// horizontal_offset=1024
// vertical_offset=768
// window_priority=15
char videoWindowDescriptor[] =
{
        0x08,
        0x04,
        0x10, 0x00, 0x30, 0x0F,
};

/* caDescriptor */
//sysid=0xb000
//pid=1234
//private_data_byte = TEST
char caDescriptor[] =
{
        0x09,
        0x08,
        0xB0, 0x00,
        0xE4, 0xD2,
        0x54, 0x45, 0x53, 0x54,
};

char caDescriptorStuff[] =
{
        0x00, //stuff
        0x09,
        0x08,
        0xB0, 0x00,
        0xE4, 0xD2,
        0x54, 0x45, 0x53, 0x54,
};

char caDescriptorStuff2[] =
{
        0x00, //stuff
        0x09,
        0x05,
        0xB0, 0x00,
        0xE4, 0xD2,
        0x54,
};

/* iso639LanguageDescriptor */
//language=eng audiotype=0 audiotype_txt="undefined"
//language=eng audiotype=1 audiotype_txt="clean effects"
//language=eng audiotype=2 audiotype_txt="hearing impaired"
//language=eng audiotype=3 audiotype_txt="visual impaired commentary"
//language=bul audiotype=4 audiotype_txt="reserved"
//language=bul audiotype=0 audiotype_txt="undefined"
char iso639LanguageDescriptor[] =
{
        0x0A,
        0x18,
        0x65, 0x6E, 0x67, 0x00,
        0x65, 0x6E, 0x67, 0x01,
        0x65, 0x6E, 0x67, 0x02,
        0x65, 0x6E, 0x67, 0x03,
        0x62, 0x75, 0x6C, 0x04,
        0x62, 0x75, 0x6C, 0x00,
};

/* systemClockDescriptor */
// external_clock_reference_indicator=1
// clock_accuracy_integer=60
// clock_accuracy_exponent=4
char systemClockDescriptor[] =
{
        0x0B,
        0x02,
        0xFC,
        0x9F,
};

/* multiplexBufferUtilizationDescriptor */
// bound_valid=1
// LTW_offset_lower_bound=1234
// LTW_offset_upper_bound=5678
char multiplexBufferUtilizationDescriptor[] =
{
        0x0C,
        0x04,
        0x84, 0xD2,
        0x96, 0x2E,
};

/* copyrightDescriptor */
// identifier=0x12345678
// additional_info=41424344
char copyrightDescriptor[] =
{
        0x0D,
        0x08,
        0x12, 0x34, 0x56, 0x78,
        0x41, 0x42, 0x43, 0x44,
};

char copyrightDescriptorStuff[] =
{
        0x00, //stuff
        0x0D,
        0x08,
        0x12, 0x34, 0x56, 0x78,
        0x41, 0x42, 0x43, 0x44,
};

char copyrightDescriptorStuff2[] =
{
        0x00, //stuff
        0x0D,
        0x04,
        0x12, 0x34, 0x56, 0x78,

};
/* maximumBitrateDescriptor */
// max_bitrate=123456
    // max_bitrate_decoded=6172800
char maximumBitrateDescriptor[] =
{
        0x0E,
        0x03,
        0xC1, 0xE2, 0x40,

};

/* privateDataIndicatorDescriptor */
// private_indicator=0xaabbccdd
char privateDataIndicatorDescriptor[] =
{
        0x0F,
        0x04,
        0xAA, 0xBB, 0xCC, 0xDD,
};

/* smoothingBufferDescriptor */
// sb_leak_rate=112233
// sb_size=4112233
char smoothingBufferDescriptor[] =
{
        0x10,
        0x06,
        0xC1, 0xB6, 0x69,
        0xFE, 0xBF, 0x69,
};

/* stdDescriptor */
// leak_valid_flag=1
char stdDescriptor[] =
{
        0x11,
        0x01,
        0xFF,
};

/* avcVideoDescriptor */
// profile_idc=0x12
// constraint_set0_flag=1
// constraint_set1_flag=1
// constraint_set2_flag=0
// AVC_compatible_flags=0x0a
// level_idc=0x34
// AVC_still_present=1
// AVC_24_hour_pircture_flag=1
char avcVideoDescriptor[] =
{
        0x28,
        0x04,
        0x12,
        0xCA,
        0x34,
        0xFF,
};



/* 13818 - 6, tr 101 202 */
/* carouselIdentifierDescriptor */
char carouselIdentifierDescriptor[] =
{
        0x13, //tag
        0x07, //length
        0x12, 0x34, 0x56, 0x78, //carouselId
        0x00, //fromatId
        0xAB, 0xCD // privateDataByte
};

char carouselIdentifierDescriptorStuff[] =
{
        0x00, 0x00, //stuff
        0x13, //tag
        0x07, //length
        0x12, 0x34, 0x56, 0x78, //carouselId
        0x00, //fromatId
        0xAB, 0xCD // privateDataByte
};

char carouselIdentifierDescriptor2[] =
{
        0x13,
        0x1c,
        0x56, 0x78, 0x12, 0x11,
        0x01, //formatId

        0x01, //moduleVersion
        0x02, 0xab, //moduleId
        0x10, 0x21, //blockSize
        0xab, 0xcd, 0xff, 0x97, //moduleSize
        0x09, //compressionMethod
        0xff, 0xff, 0xff, 0xff, //originalSize
        0xDE,   //timeout
        0x05,   //objectKeyLength
        0x01, 0x02, 0x03, 0x04, 0x05, //objectKeyData

        0xAB, 0xCD
};

char carouselIdentifierDescriptorStuff2[] =
{
        0x00, //stuff
        0x13,
        0x1c,
        0x56, 0x78, 0x12, 0x11,
        0x01, //formatId

        0x01, //moduleVersion
        0x02, 0xab, //moduleId
        0x10, 0x21, //blockSize
        0xab, 0xcd, 0xff, 0x97, //moduleSize
        0x09, //compressionMethod
        0xff, 0xff, 0xff, 0xff, //originalSize
        0xDE,   //timeout
        0x05,   //objectKeyLength
        0x01, 0x02, 0x03, 0x04, 0x05, //objectKeyData

        0xAB, 0xCD
};

char carouselIdentifierDescriptorStuff3[] =
{
        0x00, //stuff
        0x13,
        0x1a,
        0x56, 0x78, 0x12, 0x11,
        0x01, //formatId

        0x01, //moduleVersion
        0x02, 0xab, //moduleId
        0x10, 0x21, //blockSize
        0xab, 0xcd, 0xff, 0x97, //moduleSize
        0x09, //compressionMethod
        0xff, 0xff, 0xff, 0xff, //originalSize
        0xDE,   //timeout
        0x04,   //objectKeyLength
        0x01, 0x02, 0x03, 0x04, //objectKeyData

        0xAB,
};


/* associationTagDescriptor */
char associationTagDescriptor[] =
{
    0x14,
    0x0F,
    0x11, 0x22, //associationTag
    0x00, 0x00, // use
    0x02, // selectorLength
    0x12, 0x34, 0x56, 0x78, //transactionId
    0x11, 0x22, 0x33, 0x44, //timeOut
    0x99, 0x88, //privateDataByte
};


char associationTagDescriptorStuff[] =
{
    0x00, 0x00, //stuff
    0x14,
    0x0E,
    0x11, 0x22, //associationTag
    0x00, 0x00, // use
    0x02, // selectorLength
    0x12, 0x34, 0x56, 0x78, //transactionId
    0x11, 0x22, 0x33, 0x44, //timeOut
    0x99, //privateDataByte
};

char associationTagDescriptor2[] =
{
    0x14,
    0x09,
    0x78, 0x42, //associationTag
    0x00, 0x01, // use
    0x03, // selectorLength
    0x99, 0x88, 0xFF, 0x99//privateDataByte
};

char associationTagDescriptorStuff2[] =
{
    0x00, 0x00,
    0x14,
    0x09,
    0x78, 0x42, //associationTag
    0x00, 0x01, // use
    0x03, // selectorLength
    0x99, 0x88, 0xFF, 0x99//privateDataByte
};

char associationTagDescriptor3[] =
{
    0x14,
    0x0B,
    0xD1, 0x2F, //associationTag
    0x11, 0x22, // use
    0x04, // selectorLength
    0x11, 0x22, 0x33, 0x44, //selectorByte
    0x99, 0x88, //privateDataByte

};

char associationTagDescriptorStuff3[] =
{
    0x00,
    0x14,
    0x0B,
    0xD1, 0x2F, //associationTag
    0x11, 0x22, // use
    0x04, // selectorLength
    0x11, 0x22, 0x33, 0x44, //selectorByte
    0x99, 0x88, //privateDataByte

};
/* deferredAssociationTagDescriptor */
char deferredAssociationTagDescriptor[] =
{
    0x15,
    0x10,
    0x06, //associationTagsLoopLength
    0x11, 0x22, //associationTag
    0x33, 0xff, //associationTag
    0xdd, 0xaa, //associationTag
    0x9a, 0xbc, //transportStreamId
    0x12, 0x34, //programNumber
    0x99, 0x88, //originalNetworkId
    0x99, 0x88, 0x77//privateDataByte
};

char deferredAssociationTagDescriptorStuff[] =
{
    0x00, // stuff
    0x15,
    0x10,
    0x06, //associationTagsLoopLength
    0x11, 0x22, //associationTag
    0x33, 0xff, //associationTag
    0xdd, 0xaa, //associationTag
    0x9a, 0xbc, //transportStreamId
    0x12, 0x34, //programNumber
    0x99, 0x88, //originalNetworkId
    0x99, 0x88, 0x77//privateDataByte
};

// ts 102 809
/* applicationSignallingDescriptor */
char applicationSignallingDescriptor[] =
{
    0x6f,
    0x09,
                //1bit reserved
    0x11, 0x22, //15bits applicationType
                //3bit reserved
    0x01,       //5bits aitVersionNumber

    0x22, 0x33,
    0x02,

    0xff, 0x44,
    0xfa,
};

#if 0



/* vbiDataDescriptor */
char vbiDataDescriptor[] =
{
        0x45,
        0x1B,
        0x01, 0x08, 0xE0,
        0xC1, 0xE2, 0xC3, 0xE4,
        0xC5, 0xE6, 0xC7, 0x03,
        0x04, 0x12, 0x34, 0x56,
        0x78, 0x04, 0x01, 0xCA,
        0x05, 0x04, 0xD4, 0xF5,
        0xD6, 0xF7, 0x06, 0x00,

};

/* vbiTeletextDescriptor */
char vbiTeletextDescriptor[] =
{
        0x46,
        0x0F,
        0x65, 0x6E, 0x67,
        0x0B, 0xFF, 0x62, 0x75,
        0x6C, 0x12, 0x7F, 0x66,
        0x72, 0x65, 0x19, 0x40,

};

/* scramblingDescriptor */
char scramblingDescriptor[] =
{
        0x65,
        0x01,
        0x01,
};

/* transportStreamDescriptor */
char transportStreamDescriptor[] =
{
        0x67,
        0x04,
        0x54, 0x45, 0x53,
        0x54,
};

/* dsngDescriptor */
char dsngDescriptor[] =
{
        0x68,
        0x21,
        0x31, 0x32, 0x33,
        0x34, 0x2C, 0x53, 0x4E,
        0x47, 0x5F, 0x48, 0x65,
        0x61, 0x64, 0x71, 0x75,
        0x61, 0x72, 0x74, 0x65,
        0x72, 0x2C, 0x53, 0x4E,
        0x47, 0x5F, 0x50, 0x72,
        0x6F, 0x76, 0x69, 0x64,
        0x65, 0x72,
};

/* cellFrequencyLinkDescriptor */
char frequencyLinkDescriptor[] =
{
        0x6D,
        0x29,
        0x04, 0xD2, 0x00,
        0x00, 0x11, 0xD7, 0x00,
        0x11, 0x68, 0x00, 0x00,
        0x15, 0xBF, 0x0F, 0x00,
        0x00, 0x00, 0x04, 0x62,
        0x01, 0x00, 0x00, 0x08,
        0xB9, 0x02, 0x00, 0x00,
        0x0D, 0x10, 0x1E, 0xD2,
        0x00, 0x00, 0xDD, 0xD5,
        0x05, 0x00, 0x00, 0x0D,
        0x94, 0x37,
};

/* announcementSupportDescriptor */
char announcementSupportDescriptor[] =
{
        0x6E,
        0x15,
        0xFF, 0x3D, 0x08,
        0x39, 0x11, 0x22, 0x33,
        0x44, 0x55, 0x66, 0x77,
        0x58, 0x2B, 0x66, 0x77,
        0x88, 0x99, 0x44, 0x55,
        0x88, 0x48,
};

/* dtsDescriptor */
char dtsDescriptor[] =
{
        0x7B,
        0x05,
        0x82, 0xC2, 0x80,
        0xBE, 0x1E,
};

/* ibpDescriptor */
char ibpDescriptor[] =
{
        0x12,
        0x02,
        0x93, 0x88,
};

/* avcTimingAndHrdDescriptor */
char avcTimingAndHrdDescriptor[] =
{
        0x2A,
        0x0F,
        0x7F, 0x7F, 0x00,
        0xBC, 0x61, 0x4E, 0x02,
        0x0F, 0x76, 0xD2, 0x00,
        0x06, 0xF8, 0x55, 0xBF,

};

/* mpeg2AacAudioDescriptor */
char mpeg2AacAudioDescriptor[] =
{
        0x2B,
        0x03,
        0x12, 0x05, 0x00,

};

/* networkNameDescriptor */
char networkNameDescriptor[] =
{
    0x40,
    0x11,
    0x54, 0x65, 0x73,
    0x74, 0x20, 0x4E, 0x65,
    0x74, 0x77, 0x6F, 0x72,
    0x6B, 0x20, 0x4E, 0x61,
    0x6D, 0x65,
};

/* satelliteDeliverySystemDescriptor */
char satelliteDeliverySystemDescriptor[] =
{
    0x43,
    0x0B,
    0x01, 0x17, 0x57,
    0x25, 0x01, 0x92, 0xA1,
    0x02, 0x74, 0x50, 0x05,

};

/* cableDeliverySystemDescriptor */
char cableDeliverySystemDescriptor[] =
{
    0x44,
    0x0B,
    0x03, 0x12, 0x00,
    0x00, 0xFF, 0xF0, 0x03,
    0x02, 0x74, 0x50, 0x06,

};

/* terrestrialDeliverSystemDescriptor */
char terrestrialDeliverSystemDescriptor[] =
{
    0x5A,
    0x0B,
    0x49, 0x96, 0x02,
    0xD2, 0x43, 0xB2, 0x6D,
    0xFF, 0xFF, 0xFF, 0xFF,

};

/* multilingualNetworkNameDescriptor */
char multilingualNetworkNameDescriptor[] =
{
    0x5B,
    0x27,
    0x65, 0x6E, 0x67,
    0x09, 0x4D, 0x20, 0x4E,
    0x65, 0x74, 0x77, 0x6F,
    0x72, 0x6B, 0x66, 0x72,
    0x65, 0x09, 0x4D, 0x20,
    0x4E, 0x65, 0x74, 0x77,
    0x6F, 0x72, 0x6B, 0x62,
    0x75, 0x6C, 0x09, 0x4D,
    0x20, 0x4E, 0x65, 0x74,
    0x77, 0x6F, 0x72, 0x6B,

};

/* FrequencyListDescriptor */
char FrequencyListDescriptor[] =
{
    0x62,
    0x15,
    0xFE, 0x03, 0x12,
    0x00, 0x00, 0x03, 0x18,
    0x00, 0x00, 0x03, 0x24,
    0x00, 0x00, 0x03, 0x30,
    0x00, 0x00, 0x03, 0x36,
    0x00, 0x00,
};

/* serviceListDescriptor */
char serviceListDescriptor[] =
{
    0x41,
    0x0C,
    0x4E, 0x20, 0x01,
    0x4E, 0x84, 0x02, 0x4E,
    0xE8, 0x01, 0x4F, 0x4C,
    0x02,
};

/* linkageDescriptor1 */
char linkageDescriptor1[] =
{
    0x4A,
    0x07,
    0x29, 0x04, 0x9E,
    0x34, 0x00, 0x00, 0x04,

};

/* serviceListDescriptor */
char serviceListDescriptor[] =
{
    0x41,
    0x0C,
    0x4E, 0x20, 0x01,
    0x4E, 0x84, 0x02, 0x4E,
    0xE8, 0x01, 0x4F, 0x4C,
    0x02,
};

/* linkageDescriptor_mobile */
char linkageDescriptor_mobile[] =
{
    0x4A,
    0x0C,
    0x29, 0x68, 0x9E,
    0x98, 0x50, 0x78, 0x08,
    0x1E, 0xA0, 0x28, 0x52,
    0x08,
};

/* bouquetNameDescriptor */
char bouquetNameDescriptor[] =
{
    0x47,
    0x11,
    0x54, 0x65, 0x73,
    0x74, 0x20, 0x42, 0x6F,
    0x75, 0x71, 0x75, 0x65,
    0x74, 0x20, 0x4E, 0x61,
    0x6D, 0x65,
};

/* multilingualBouquetNameDescriptor */
char multilingualBouquetNameDescriptor[] =
{
    0x5C,
    0x27,
    0x65, 0x6E, 0x67,
    0x09, 0x4D, 0x20, 0x42,
    0x6F, 0x75, 0x71, 0x75,
    0x65, 0x74, 0x66, 0x72,
    0x65, 0x09, 0x4D, 0x20,
    0x42, 0x6F, 0x75, 0x71,
    0x75, 0x65, 0x74, 0x62,
    0x75, 0x6C, 0x09, 0x4D,
    0x20, 0x42, 0x6F, 0x75,
    0x71, 0x75, 0x65, 0x74,

};

/* serviceListDescriptor */
char serviceListDescriptor[] =
{
    0x41,
    0x0C,
    0x4E, 0x20, 0x01,
    0x4E, 0x84, 0x02, 0x4E,
    0xE8, 0x01, 0x4F, 0x4C,
    0x02,
};

/* serviceListDescriptor */
char serviceListDescriptor[] =
{
    0x41,
    0x0C,
    0x4E, 0x20, 0x01,
    0x4E, 0x84, 0x02, 0x4E,
    0xE8, 0x01, 0x4F, 0x4C,
    0x02,
};

/* ServiceDescriptor */
char ServiceDescriptor[] =
{
    0x48,
    0x26,
    0x01, 0x12, 0x54,
    0x65, 0x73, 0x74, 0x20,
    0x50, 0x72, 0x6F, 0x76,
    0x69, 0x64, 0x65, 0x72,
    0x20, 0x4E, 0x61, 0x6D,
    0x65, 0x11, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x53,
    0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x20, 0x4E,
    0x61, 0x6D, 0x65,
};

/* countryAvailabilityDescriptor */
char countryAvailabilityDescriptor[] =
{
    0x49,
    0x0A,
    0xFF, 0x47, 0x42,
    0x52, 0x46, 0x52, 0x41,
    0x42, 0x55, 0x4C,
};

/* mosaicDescriptor */
char mosaicDescriptor[] =
{
    0x51,
    0x26,
    0xAA, 0x03, 0xF9,
    0x03, 0xC0, 0xC1, 0xC2,
    0x01, 0x9C, 0xA4, 0x07,
    0xFA, 0x03, 0xC3, 0xC4,
    0xC5, 0x02, 0x9E, 0x34,
    0x29, 0x04, 0x50, 0x14,
    0x0B, 0xFB, 0x03, 0xC6,
    0xC7, 0xC8, 0x04, 0xA0,
    0x28, 0x2A, 0xF8, 0x52,
    0x08, 0x79, 0x18,
};

/* telephoneDescriptor */
char telephoneDescriptor[] =
{
    0x57,
    0x0F,
    0xE3, 0xAD, 0x87,
    0x2B, 0x33, 0x35, 0x39,
    0x32, 0x39, 0x38, 0x36,
    0x38, 0x36, 0x32, 0x30,

};

/* multilingualServiceNameDescriptor */
char multilingualServiceNameDescriptor[] =
{
    0x5D,
    0x48,
    0x65, 0x6E, 0x67,
    0x0A, 0x4D, 0x20, 0x50,
    0x72, 0x6F, 0x76, 0x69,
    0x64, 0x65, 0x72, 0x09,
    0x4D, 0x20, 0x53, 0x65,
    0x72, 0x76, 0x69, 0x63,
    0x65, 0x66, 0x72, 0x65,
    0x0A, 0x4D, 0x20, 0x50,
    0x72, 0x6F, 0x76, 0x69,
    0x64, 0x65, 0x72, 0x09,
    0x4D, 0x20, 0x53, 0x65,
    0x72, 0x76, 0x69, 0x63,
    0x65, 0x62, 0x75, 0x6C,
    0x0A, 0x4D, 0x20, 0x50,
    0x72, 0x6F, 0x76, 0x69,
    0x64, 0x65, 0x72, 0x09,
    0x4D, 0x20, 0x53, 0x65,
    0x72, 0x76, 0x69, 0x63,
    0x65,
};

/* privateDataSpecifierDescriptor */
char privateDataSpecifierDescriptor[] =
{
    0x5F,
    0x04,
    0xAA, 0xBB, 0xCC,
    0xDD,
};

/* ServiceDescriptor */
char ServiceDescriptor[] =
{
    0x48,
    0x26,
    0x01, 0x12, 0x54,
    0x65, 0x73, 0x74, 0x20,
    0x50, 0x72, 0x6F, 0x76,
    0x69, 0x64, 0x65, 0x72,
    0x20, 0x4E, 0x61, 0x6D,
    0x65, 0x11, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x53,
    0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x20, 0x4E,
    0x61, 0x6D, 0x65,
};

/* countryAvailabilityDescriptor */
char countryAvailabilityDescriptor[] =
{
    0x49,
    0x0A,
    0x7F, 0x47, 0x42,
    0x52, 0x46, 0x52, 0x41,
    0x42, 0x55, 0x4C,
};

/* privateDataSpecifierDescriptor */
char privateDataSpecifierDescriptor[] =
{
    0x5F,
    0x04,
    0xAA, 0xBB, 0xCC,
    0xDD,
};

/* ServiceDescriptor */
char ServiceDescriptor[] =
{
    0x48,
    0x26,
    0x01, 0x12, 0x54,
    0x65, 0x73, 0x74, 0x20,
    0x50, 0x72, 0x6F, 0x76,
    0x69, 0x64, 0x65, 0x72,
    0x20, 0x4E, 0x61, 0x6D,
    0x65, 0x11, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x53,
    0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x20, 0x4E,
    0x61, 0x6D, 0x65,
};

/* timeShiftedServiceDescriptor */
char timeShiftedServiceDescriptor[] =
{
    0x4C,
    0x02,
    0x52, 0x08,
};

/* privateDataSpecifierDescriptor */
char privateDataSpecifierDescriptor[] =
{
    0x5F,
    0x04,
    0xAA, 0xBB, 0xCC,
    0xDD,
};

/* ServiceDescriptor */
char ServiceDescriptor[] =
{
    0x48,
    0x26,
    0x01, 0x12, 0x54,
    0x65, 0x73, 0x74, 0x20,
    0x50, 0x72, 0x6F, 0x76,
    0x69, 0x64, 0x65, 0x72,
    0x20, 0x4E, 0x61, 0x6D,
    0x65, 0x11, 0x54, 0x65,
    0x73, 0x74, 0x20, 0x53,
    0x65, 0x72, 0x76, 0x69,
    0x63, 0x65, 0x20, 0x4E,
    0x61, 0x6D, 0x65,
};

/* nvodReferenceDescriptor */
char nvodReferenceDescriptor[] =
{
    0x4B,
    0x12,
    0x27, 0x10, 0x9C,
    0x40, 0x4E, 0x20, 0x27,
    0x74, 0x9C, 0xA4, 0x4E,
    0x84, 0x27, 0xD8, 0x9D,
    0x08, 0x4E, 0xE8,
};

/* privateDataSpecifierDescriptor */
char privateDataSpecifierDescriptor[] =
{
    0x5F,
    0x04,
    0xAA, 0xBB, 0xCC,
    0xDD,
};

/* shortEventDescriptor */
char shortEventDescriptor[] =
{
    0x4D,
    0x2C,
    0x65, 0x6E, 0x67,
    0x0E, 0x4D, 0x61, 0x6A,
    0x6F, 0x72, 0x20, 0x54,
    0x56, 0x20, 0x65, 0x76,
    0x65, 0x6E, 0x74, 0x19,
    0x54, 0x68, 0x65, 0x20,
    0x65, 0x76, 0x65, 0x6E,
    0x74, 0x20, 0x6F, 0x66,
    0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x65, 0x6E,
    0x74, 0x75, 0x72, 0x79,
    0x21,
};

/* linkageDescriptor_event */
char linkageDescriptor_event[] =
{
    0x4A,
    0x0A,
    0x29, 0xCC, 0x9E,
    0xFC, 0x50, 0xDC, 0x0D,
    0x79, 0x18, 0xFF,
};

/* extendedEventDescriptor */
char extendedEventDescriptor[] =
{
    0x4E,
    0x49,
    0x00, 0x65, 0x6E,
    0x67, 0x30, 0x08, 0x44,
    0x69, 0x72, 0x65, 0x63,
    0x74, 0x6F, 0x72, 0x0F,
    0x46, 0x61, 0x6D, 0x6F,
    0x75, 0x73, 0x20, 0x64,
    0x69, 0x72, 0x65, 0x63,
    0x74, 0x6F, 0x72, 0x04,
    0x59, 0x65, 0x61, 0x72,
    0x04, 0x32, 0x30, 0x31,
    0x31, 0x06, 0x52, 0x61,
    0x74, 0x69, 0x6E, 0x67,
    0x05, 0x2A, 0x2A, 0x2A,
    0x2B, 0x2B, 0x13, 0x57,
    0x6F, 0x77, 0x2C, 0x20,
    0x77, 0x68, 0x61, 0x74,
    0x20, 0x61, 0x6E, 0x20,
    0x65, 0x76, 0x65, 0x6E,
    0x74, 0x21,
};

/* shortEventDescriptor */
char shortEventDescriptor[] =
{
    0x4D,
    0x2C,
    0x65, 0x6E, 0x67,
    0x0E, 0x4D, 0x61, 0x6A,
    0x6F, 0x72, 0x20, 0x54,
    0x56, 0x20, 0x65, 0x76,
    0x65, 0x6E, 0x74, 0x19,
    0x54, 0x68, 0x65, 0x20,
    0x65, 0x76, 0x65, 0x6E,
    0x74, 0x20, 0x6F, 0x66,
    0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x65, 0x6E,
    0x74, 0x75, 0x72, 0x79,
    0x21,
};

/* linkageDescriptor_extendedEvent */
char linkageDescriptor_extendedEvent[] =
{
    0x4A,
    0x1F,
    0x2A, 0x30, 0x9F,
    0x60, 0x51, 0x40, 0x0E,
    0x79, 0x18, 0x5F, 0x1E,
    0xC6, 0x7D, 0x00, 0xC3,
    0xA4, 0x10, 0x55, 0xF0,
    0x80, 0xE8, 0xE7, 0x32,
    0xC8, 0xA7, 0xF8, 0x59,
    0xD8, 0x84, 0xD0, 0x00,

};

/* ContentDescriptor */
char ContentDescriptor[] =
{
    0x54,
    0x04,
    0x24, 0x4E, 0x68,
    0xB1,
};

/* caIdentifierDescriptor */
char caIdentifierDescriptor[] =
{
    0x53,
    0x06,
    0xAA, 0xBB, 0xCC,
    0xDD, 0xEE, 0xFF,
};

/* parentalRatingDescriptor */
char parentalRatingDescriptor[] =
{
    0x55,
    0x10,
    0x55, 0x53, 0x41,
    0x00, 0x43, 0x48, 0x49,
    0x0F, 0x46, 0x52, 0x41,
    0x0C, 0x42, 0x55, 0x4C,
    0x18,
};

/* shortEventDescriptor */
char shortEventDescriptor[] =
{
    0x4D,
    0x2C,
    0x65, 0x6E, 0x67,
    0x0E, 0x4D, 0x61, 0x6A,
    0x6F, 0x72, 0x20, 0x54,
    0x56, 0x20, 0x65, 0x76,
    0x65, 0x6E, 0x74, 0x19,
    0x54, 0x68, 0x65, 0x20,
    0x65, 0x76, 0x65, 0x6E,
    0x74, 0x20, 0x6F, 0x66,
    0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x65, 0x6E,
    0x74, 0x75, 0x72, 0x79,
    0x21,
};

/* timeShiftedEventDescriptor */
char timeShiftedEventDescriptor[] =
{
    0x4F,
    0x04,
    0x55, 0xF0, 0x7D,
    0x00,
};

/* ContentDescriptor */
char ContentDescriptor[] =
{
    0x54,
    0x04,
    0x24, 0x4E, 0x68,
    0xB1,
};

/* shortEventDescriptor */
char shortEventDescriptor[] =
{
    0x4D,
    0x2C,
    0x65, 0x6E, 0x67,
    0x0E, 0x4D, 0x61, 0x6A,
    0x6F, 0x72, 0x20, 0x54,
    0x56, 0x20, 0x65, 0x76,
    0x65, 0x6E, 0x74, 0x19,
    0x54, 0x68, 0x65, 0x20,
    0x65, 0x76, 0x65, 0x6E,
    0x74, 0x20, 0x6F, 0x66,
    0x20, 0x74, 0x68, 0x65,
    0x20, 0x63, 0x65, 0x6E,
    0x74, 0x75, 0x72, 0x79,
    0x21,
};

/* extendedEventDescriptor */
char extendedEventDescriptor[] =
{
    0x4E,
    0x49,
    0x00, 0x65, 0x6E,
    0x67, 0x30, 0x08, 0x44,
    0x69, 0x72, 0x65, 0x63,
    0x74, 0x6F, 0x72, 0x0F,
    0x46, 0x61, 0x6D, 0x6F,
    0x75, 0x73, 0x20, 0x64,
    0x69, 0x72, 0x65, 0x63,
    0x74, 0x6F, 0x72, 0x04,
    0x59, 0x65, 0x61, 0x72,
    0x04, 0x32, 0x30, 0x31,
    0x31, 0x06, 0x52, 0x61,
    0x74, 0x69, 0x6E, 0x67,
    0x05, 0x2A, 0x2A, 0x2A,
    0x2B, 0x2B, 0x13, 0x57,
    0x6F, 0x77, 0x2C, 0x20,
    0x77, 0x68, 0x61, 0x74,
    0x20, 0x61, 0x6E, 0x20,
    0x65, 0x76, 0x65, 0x6E,
    0x74, 0x21,
};

/* parentalRatingDescriptor */
char parentalRatingDescriptor[] =
{
    0x55,
    0x10,
    0x55, 0x53, 0x41,
    0x00, 0x43, 0x48, 0x49,
    0x0F, 0x46, 0x52, 0x41,
    0x0C, 0x42, 0x55, 0x4C,
    0x18,
};

/* pdcDescriptor */
char pdcDescriptor[] =
{
    0x69,
    0x03,
    0xF5, 0xD8, 0x05,

};

/* LocalTimeOffsetDescriptor */
char LocalTimeOffsetDescriptor[] =
{
    0x58,
    0x1A,
    0x42, 0x55, 0x4C,
    0x0B, 0x02, 0x00, 0xD6,
    0x5B, 0x23, 0x31, 0x30,
    0x03, 0x00, 0x55, 0x53,
    0x41, 0x26, 0x14, 0x00,
    0xCB, 0xC1, 0x01, 0x46,
    0x39, 0x18, 0x30,
};

/* mpeg4VideoDescriptor */
char mpeg4VideoDescriptor[] =
{
    0x1B,
    0x01,
    0x12,
};

/* streamIdentifierDescriptor */
char streamIdentifierDescriptor[] =
{
    0x52,
    0x01,
    0x2E,
};

/* mpeg4AudioDescriptor */
char mpeg4AudioDescriptor[] =
{
    0x1C,
    0x01,
    0x13,
};

/* componentDescriptor */
char componentDescriptor[] =
{
    0x50,
    0x0C,
    0xF2, 0x03, 0x2E,
    0x65, 0x6E, 0x67, 0x53,
    0x74, 0x65, 0x72, 0x65,
    0x6F,
};

/* multilingualComponentDescriptor */
char multilingualComponentDescriptor[] =
{
    0x5E,
    0x1F,
    0x2E, 0x65, 0x6E,
    0x67, 0x06, 0x53, 0x74,
    0x65, 0x72, 0x65, 0x6F,
    0x66, 0x72, 0x65, 0x06,
    0x53, 0x74, 0x65, 0x72,
    0x65, 0x6F, 0x62, 0x75,
    0x6C, 0x06, 0x53, 0x74,
    0x65, 0x72, 0x65, 0x6F,

};

/* teletextDescriptor */
char teletextDescriptor[] =
{
    0x56,
    0x0F,
    0x65, 0x6E, 0x67,
    0x0B, 0xFF, 0x62, 0x75,
    0x6C, 0x12, 0x7F, 0x66,
    0x72, 0x65, 0x19, 0x40,

};

/* serviceMoveDescriptor */
char serviceMoveDescriptor[] =
{
    0x60,
    0x06,
    0x27, 0x10, 0x3A,
    0x98, 0x4E, 0x20,
};

/* subtitlingDescriptor */
char subtitlingDescriptor[] =
{
    0x59,
    0x18,
    0x65, 0x6E, 0x67,
    0x01, 0x00, 0x02, 0x00,
    0x03, 0x62, 0x75, 0x6C,
    0x02, 0x00, 0x03, 0x00,
    0x04, 0x66, 0x72, 0x65,
    0x05, 0x00, 0x06, 0x00,
    0x07,
};

/* slDescriptor */
char slDescriptor[] =
{
    0x1E,
    0x02,
    0x12, 0x34,
};

/* iodDescriptor */
char iodDescriptor[] =
{
    0x1D,
    0x03,
    0x01, 0x23, 0x45,

};

/* fmcDescriptor */
char fmcDescriptor[] =
{
    0x1F,
    0x09,
    0x11, 0x22, 0x33,
    0x44, 0x55, 0x66, 0x77,
    0x88, 0x99,
};

/* externalEsIdDescriptor */
char externalEsIdDescriptor[] =
{
    0x20,
    0x02,
    0x12, 0x34,
};

/* muxCodeDescriptor */
char muxCodeDescriptor[] =
{
    0x21,
    0x29,
    0x02, 0x11, 0x00,
    0x11, 0x22, 0x03, 0x01,
    0x2D, 0x0A, 0x14, 0x0B,
    0x15, 0x0C, 0x16, 0x0D,
    0x17, 0x0E, 0x18, 0x0B,
    0x1E, 0x28, 0x02, 0x33,
    0x00, 0x10, 0x44, 0x02,
    0x13, 0x32, 0x3C, 0x33,
    0x3D, 0x24, 0x46, 0x50,
    0x47, 0x51, 0x48, 0x52,
    0x49, 0x53,
};

/* fmxBufferSizeDescriptor */
char fmxBufferSizeDescriptor[] =
{
    0x22,
    0x0F,
    0x11, 0x22, 0x33,
    0x11, 0x22, 0x33, 0x44,
    0x55, 0x66, 0x77, 0x88,
    0x99, 0xAA, 0xBB, 0xCC,

};

/* multiplexBufferDescriptor */
char multiplexBufferDescriptor[] =
{
    0x23,
    0x06,
    0x01, 0xB6, 0x69,
    0x06, 0xCC, 0x7E,
};

/* metadataStdDescriptor */
char metadataStdDescriptor[] =
{
    0x27,
    0x09,
    0xC0, 0x30, 0x39,
    0xC0, 0x5B, 0xA0, 0xC0,
    0x87, 0x07,
};

/* flexMuxTimingDescriptor */
char flexMuxTimingDescriptor[] =
{
    0x2C,
    0x08,
    0x12, 0x34, 0x07,
    0x5B, 0xCD, 0x15, 0x37,
    0x20,
};

/* contentLabelingDescriptor1 */
char contentLabelingDescriptor1[] =
{
    0x24,
    0x03,
    0xAB, 0xCD, 0x07,

};

/* contentLabelingDescriptor2 */
char contentLabelingDescriptor2[] =
{
    0x24,
    0x07,
    0xFF, 0xF0, 0x1F,
    0x03, 0x41, 0x42, 0x43,

};

/* contentLabelingDescriptor3 */
char contentLabelingDescriptor3[] =
{
    0x24,
    0x16,
    0xFF, 0xFF, 0xAA,
    0xBB, 0xCC, 0xDD, 0x97,
    0x03, 0x61, 0x62, 0x63,
    0xFF, 0xF0, 0xF0, 0xF0,
    0xF0, 0xFF, 0xF1, 0xF1,
    0xF1, 0xF1, 0xE4,
};

/* metadataPointerDescriptor */
char metadataPointerDescriptor[] =
{
    0x25,
    0x17,
    0xFF, 0xFF, 0x00,
    0x11, 0x22, 0x33, 0xFF,
    0xDE, 0xAD, 0xBE, 0xAF,
    0x88, 0xBF, 0x03, 0x61,
    0x62, 0x63, 0x03, 0xE8,
    0x07, 0xD0, 0x0B, 0xB8,

};

/* metadataDescriptor1 */
char metadataDescriptor1[] =
{
    0x26,
    0x05,
    0xFF, 0xF0, 0xF0,
    0x88, 0x0F,
};

/* metadataDescriptor2 */
char metadataDescriptor2[] =
{
    0x26,
    0x15,
    0xFF, 0xFF, 0x00,
    0x11, 0x22, 0x33, 0xFF,
    0xDE, 0xAD, 0xBE, 0xAF,
    0x88, 0x7F, 0x03, 0x61,
    0x62, 0x63, 0x03, 0x41,
    0x42, 0x43,
};

/* ancillaryDataDescriptor */
char ancillaryDataDescriptor[] =
{
    0x6B,
    0x01,
    0xD5,
};

/* partialTransportStreamDescriptor */
char partialTransportStreamDescriptor[] =
{
    0x63,
    0x08,
    0xC0, 0x13, 0x88,
    0xC0, 0x1B, 0x58, 0xC3,
    0xE8,
};


#endif

#endif // DESCRIPTOR_TEST_H
